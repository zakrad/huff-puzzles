/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro BALANCEOF() = takes(1) returns(1) {

    0x00 mstore
    0x20 0x00 sha3 sload

}

#define macro WITHDRAW() = takes(1) returns(0) {

    caller 0x00 mstore  
    dup1                                    //[amount, amount]
    0x20 0x00 sha3 swap1 dup2 sload         //[balance, amount, slot, amount]
    dup1 0x00 eq
    revertwithdraw jumpi
    dup2 dup2 lt                            //[balance, amount, slot, amount]
    end jumpi
    sub swap1                               //[slot, newBalance, amount]
    sstore
    0x00 dup1 dup1 dup1 swap4 caller gas call
    end:
        0x00 0x00 return

    revertwithdraw:
        0x00 0x00 revert

}

#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload
    0xE0 shr

    dup1 __FUNC_SIG(balanceOf) eq
    balanceOf jumpi

    __FUNC_SIG(withdraw) eq
    withdraw jumpi

    caller 0x00 mstore
    0x20 0x00 sha3 dup1 sload
    callvalue add
    swap1 sstore

    balanceOf:
        0x04 calldataload
        BALANCEOF()
        0x00 mstore
        0x20 0x00 return

    withdraw:
        0x04 calldataload
        WITHDRAW()

}
