
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define macro PUSHH() = takes(1) returns(0) {
       
    0x00 sload dup1                     //[length, length, number]
    0x20 mul                           //[offset, length, number] 
    0x20 0x00 sha3 add                 //[SlotToSave, length, number]
    swap1 swap2 swap1                  //[SlotToSave, number, length]
    sstore                             //[length]
    0x01 add                           //[newLength]
    0x00 sstore
    0x00 0x00 return

 }

  #define macro POPP() = takes(0) returns(0) {

    0x00 sload dup1                    //[length, length]
    0x00 eq
    end jumpi 
    0x01 swap1 sub dup1                //[length - 1, length - 1]
    0x20 mul                           //[offset, length - 1]
    0x20 0x00 sha3 add                 //[SlotToPop, length - 1]
    0x00 swap1 sstore                  //[length - 1]
    0x00 sstore
    0x00 0x00 return
    end:
        __ERROR(ZeroArray)
        0x00 mstore
        0x04 0x00 revert
 }

 #define macro READ() = takes(1) returns(1) {
    
    0x00 sload dup1                    //[length, length, index]
    0x00 eq
    end jumpi 

    dup2 swap1 gt                       //[length, index]
    continue jumpi
    __ERROR(OutOfBounds)
    0x00 mstore
    0x04 0x00 revert

    end:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
    continue:                             //[index]
        0x20 mul                           //[offset]
        0x20 0x00 sha3 add                 //[SlotToRead]
        sload                              //[value]
 }

 #define macro LENGTH() = takes(0) returns(1) {
       
    0x00 sload

 }

  #define macro WRITE() = takes(2) returns(0) {

    swap1                              //[index, number]
    0x00 sload dup1                    //[length, length, number, index]
    0x00 eq
    end jumpi 

    dup2 swap1 gt                       //[length, index, number]
    continue jumpi
    __ERROR(OutOfBounds)
    0x00 mstore
    0x04 0x00 revert

    end:
        __ERROR(OutOfBounds)
        0x00 mstore
        0x04 0x00 revert
    continue:                               //[index, number]
        0x20 mul                           //[offset, number]
        0x20 0x00 sha3 add                 //[SlotToWrite, number]
        sstore                              //[]
 }



 #define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload
    0xE0 shr

    dup1 __FUNC_SIG(pushh) eq
    pushh jumpi

    dup1 __FUNC_SIG(popp) eq
    popp jumpi

    dup1 __FUNC_SIG(read) eq
    read jumpi

    dup1 __FUNC_SIG(length) eq
    length jumpi

    __FUNC_SIG(write) eq
    write jumpi

    0x00 0x00 revert

    pushh:
        0x04 calldataload
        PUSHH()
    
    popp:
        POPP()
    
    read:
        0x04 calldataload
        READ()
        0x00 mstore
        0x20 0x00 return

    length:
        LENGTH()
        0x00 mstore
        0x20 0x00 return

    write:
        0x04 calldataload
        0x24 calldataload
        WRITE()
 }